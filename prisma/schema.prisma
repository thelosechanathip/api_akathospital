generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model auth_tokens {
  auth_token_id Int      @id @default(autoincrement())
  token         String   @unique(map: "token") @db.VarChar(255)
  user_id       Int
  otp_verified  Boolean? @default(false)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  expires_at    DateTime @default(dbgenerated("('0000-00-00 00:00:00')")) @db.Timestamp(0)
  is_active     Boolean? @default(true)
  users         users    @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "user_id")

  @@index([user_id], map: "user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model check_in_status {
  check_in_status_id   Int      @id @default(autoincrement())
  check_in_status_name String   @unique(map: "check_in_status_name") @db.VarChar(100)
  created_at           DateTime @default(now()) @db.Timestamp(0)
  created_by           String   @db.VarChar(100)
  updated_at           DateTime @default(now()) @db.Timestamp(0)
  updated_by           String   @db.VarChar(100)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model check_out_status {
  check_out_status_id   Int      @id @default(autoincrement())
  check_out_status_name String   @unique(map: "check_out_status_name") @db.VarChar(100)
  created_at            DateTime @default(now()) @db.Timestamp(0)
  created_by            String   @db.VarChar(100)
  updated_at            DateTime @default(now()) @db.Timestamp(0)
  updated_by            String   @db.VarChar(100)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model complaint_topics {
  complaint_topic_id   Int          @id @default(autoincrement())
  complaint_topic_name String       @db.VarChar(100)
  created_at           DateTime     @default(now()) @db.Timestamp(0)
  created_by           String       @db.VarChar(100)
  updated_at           DateTime     @default(now()) @db.Timestamp(0)
  updated_by           String       @db.VarChar(100)
  complaints           complaints[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model complaints {
  complaint_id       Int              @id @default(autoincrement())
  fullname           String           @db.VarChar(100)
  email              String           @db.VarChar(100)
  telephone_number   String           @db.VarChar(50)
  complaint_topic_id Int
  detail             String           @db.LongText
  created_at         DateTime         @default(now()) @db.Timestamp(0)
  created_by         String           @db.VarChar(100)
  updated_at         DateTime         @default(now()) @db.Timestamp(0)
  updated_by         String           @db.VarChar(100)
  complaint_topics   complaint_topics @relation(fields: [complaint_topic_id], references: [complaint_topic_id], onUpdate: Restrict, map: "complaints_ibfk_1")

  @@index([complaint_topic_id], map: "complaints_ibfk_1")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model holidays {
  holiday_id   Int      @id @default(autoincrement())
  holiday_name String   @db.LongText
  holiday_date String   @unique(map: "holiday_date") @default("0000-00-00") @db.VarChar(50)
  created_at   DateTime @default(now()) @db.Timestamp(0)
  created_by   String   @db.VarChar(100)
  updated_at   DateTime @default(now()) @db.Timestamp(0)
  updated_by   String   @db.VarChar(100)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model shift_types {
  shift_type_id   Int      @id @default(autoincrement())
  shift_type_name String   @unique(map: "shift_type_name") @db.VarChar(100)
  created_at      DateTime @default(now()) @db.Timestamp(0)
  created_by      String   @db.VarChar(100)
  updated_at      DateTime @default(now()) @db.Timestamp(0)
  updated_by      String   @db.VarChar(100)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model shifts {
  shift_id       Int      @id @default(autoincrement())
  shift_name     String   @unique(map: "shift_name") @db.VarChar(100)
  shift_starting String   @default("00:00:00") @db.VarChar(50)
  shift_ending   String   @default("00:00:00") @db.VarChar(50)
  created_at     DateTime @default(now()) @db.Timestamp(0)
  created_by     String   @db.VarChar(100)
  updated_at     DateTime @default(now()) @db.Timestamp(0)
  updated_by     String   @db.VarChar(100)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model token_blacklist {
  token_blacklist_id BigInt   @id @default(autoincrement())
  token              String   @unique(map: "token") @db.VarChar(255)
  blacklisted_at     DateTime @default(now()) @db.Timestamp(0)
  expires_at         DateTime @default(dbgenerated("('0000-00-00 00:00:00')")) @db.Timestamp(0)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  user_id          Int           @id @default(autoincrement())
  username         String        @unique(map: "username") @db.VarChar(100)
  email            String        @unique(map: "email") @db.VarChar(100)
  password         String        @db.VarChar(100)
  prefix           String        @db.VarChar(50)
  fullname_thai    String        @db.VarChar(100)
  fullname_english String?       @db.VarChar(100)
  national_id      BigInt        @unique(map: "national_id")
  position         String?       @db.VarChar(100)
  department       String?       @db.VarChar(100)
  telegram_chat_id String?       @db.VarChar(100)
  status           String?       @db.VarChar(50)
  created_at       DateTime      @default(now()) @db.Timestamp(0)
  updated_at       DateTime      @default(now()) @db.Timestamp(0)
  auth_tokens      auth_tokens[]
}
