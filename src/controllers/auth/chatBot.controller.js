const services = require('../../services/auth/chatBot.service');
const TelegramBot = require("node-telegram-bot-api");

exports.chatBot = async () => {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    const bot = new TelegramBot(token, { polling: true });

    bot.on('polling_error', (error) => {
        console.error("Polling Error:", error);
    });

    bot.onText(/\/start/, (msg) => {
        const chatId = msg.chat.id;
        bot.sendMessage(chatId, "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Bot ‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢ Version: 0.0.1");
    });

    bot.onText(/\/web/, (msg) => {
        const chatId = msg.chat.id;
        const web = {
            akathospitalOld: "http://akathospital.com/",
            akathospitalNew: "https://akathos.moph.go.th/"
        };
        let message = `‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢:\n`;
        message += `‡πÄ‡∏Å‡πà‡∏≤: ${web.akathospitalOld}\n`;
        message += `‡πÉ‡∏´‡∏°‡πà: ${web.akathospitalNew}\n`;
        bot.sendMessage(chatId, message);
    });

    const userStates = {};

    bot.onText(/\/hosxp/, (msg) => {
        const chatId = msg.chat.id;
        bot.sendMessage(chatId, `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:`);
        userStates[chatId] = 'hosxpSystem';
    });

    bot.on('callback_query', async (callbackQuery) => {
        const chatId = callbackQuery.message.chat.id;
        const data = callbackQuery.data;
        const messageId = callbackQuery.message.message_id;

        if (data === 'request_checkQueue_nationalId') {
            bot.sendMessage(chatId, `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:`);
            userStates[chatId] = 'waiting_for_checkQueue_nationalId';
        }

        bot.answerCallbackQuery(callbackQuery.id);
    });

    bot.on('message', async (msg) => {
        const chatId = msg.chat.id;
        const text = msg.text;

        // HoSXP Flow
        if (userStates[chatId] === 'hosxpSystem') {
            if (text) {
                try {
                    const userMessage = await services.hosxpSystem(text);
                    bot.sendMessage(chatId, userMessage);
                    userStates[chatId] = 'waiting_for_hosxp_menu_selection';
                } catch (error) {
                    console.error("Error waiting_for_hosxp_menu_selection:", error);
                    bot.sendMessage(chatId, `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö`);
                }
            } else {
                bot.sendMessage(chatId, `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô`);
            }
        } else if (userStates[chatId] === 'waiting_for_hosxp_menu_selection') {
            if (text === '1') {
                const resData = await services.fetchCountPatient();
                bot.sendMessage(chatId, resData);
                userStates[chatId] === 'waiting_for_hosxp_menu_selection';
            } else if (text === '0') {
                bot.sendMessage(chatId, "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö HoSXP ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡∏∞");
                delete userStates[chatId];
            } else {
                bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");
            }
        }
        // Check Queue Flow
        else if (userStates[chatId] === 'waiting_for_checkQueue_nationalId') {
            if (text && !text.startsWith('/')) {
                const nationalId = text;
                try {
                    const resCheckQueue = await services.checkQueue(nationalId);
                    bot.sendMessage(chatId, resCheckQueue);
                    delete userStates[chatId];
                } catch (err) {
                    console.error("Error checkQueue:", err);
                    bot.sendMessage(chatId, `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏¥‡∏ß`);
                }
            } else if (text && text.startsWith('/')) {
                bot.sendMessage(chatId, `‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏¥‡∏ß`);
                delete userStates[chatId];
            } else {
                bot.sendMessage(chatId, `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô`);
            }
        }
        // Default Response for non-commands
        else if (text && !text.startsWith('/')) {
            bot.sendMessage(chatId, `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤', callback_data: 'request_checkQueue_nationalId' }
                        ]
                    ]
                }
            });
        }
    });

    // console.log('Bot is running...');
};